{"version":3,"sources":["UIComponents/Header.js","UIComponents/Timer.js","UIComponents/Loader.js","UIComponents/Score.js","UIComponents/MainBody.js","UIComponents/GameOver.js","App.js","index.js"],"names":["Header","className","Timer","props","isNaN","timeLeft","Loader","isLoading","Score","score","count","MainBody","question","disabled","onClick","handleAnswer","options","style","buttonStyle","msgClass","msg","GameOver","class","playAgain","App","useState","setCount","setIsloading","setIsAnswered","setScore","NaN","setTimeLeft","setQuestion","setMsg","setMsgClass","correct","setCorrect","incorrect1","setIncorrect1","incorrect2","setIncorrect2","incorrect3","setIncorrect3","setOptions","correctIndex","setCorrectIndex","setButtonStyle","useEffect","fetch","then","res","json","data","result","results","decodeHTML","correct_answer","incorrect_answers","catch","err","console","log","timmer","setInterval","prev","clearInterval","optionsArr","itemC","item2","item3","item4","index1","Math","random","toFixed","index2","index3","index4","createRandArr","html","txt","document","createElement","innerHTML","value","selectedOption","styles","color","borderColor","setTimeout","backgroundColor","height","correctOption","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.42414366.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../styles.css'\r\nconst Header=()=>{\r\n    return(\r\n        <div className='header-container'><span>Useless Trivia</span></div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nconst Timer=(props)=>{\r\n    if(isNaN(props.timeLeft))\r\n    {\r\n        return(\r\n            <div className='timmer'>---</div>\r\n        ) \r\n    }\r\n    return(\r\n        <div className='timmer'>{props.timeLeft}</div>\r\n    )\r\n}\r\n\r\nexport default Timer","import React from 'react'\r\nconst Loader=(props)=>{\r\n    if(props.isLoading){\r\n        return(<div className='loader'></div>)\r\n    }\r\n    return(<div></div>)\r\n}\r\nexport default Loader","import React from 'react'\r\nimport Loader from './Loader'\r\nconst Score=(props)=>{\r\n    return (\r\n        <div className='loader-bar'>\r\n            <span className='score'>Score:{props.score}/{props.count*10}</span>\r\n            <Loader isLoading={props.isLoading}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Score","import React from 'react'\r\nconst MainBody=(props)=>{\r\n    // console.log(props)\r\n    return(\r\n        <div >            \r\n            <div className='question-card'>\r\n                <div className='question'><span>Q.{props.count} </span><span>{props.question}</span></div><br/>\r\n                \r\n                <div className='options'>\r\n                    <button \r\n                    disabled={props.isLoading} \r\n                    onClick={()=>props.handleAnswer(props.options[0])}\r\n                    style={props.buttonStyle[0]}\r\n                    >\r\n                        {props.options[0]}\r\n                    </button>\r\n                    <button \r\n                    disabled={props.isLoading} \r\n                    onClick={()=>props.handleAnswer(props.options[1])}\r\n                    style={props.buttonStyle[1]}\r\n                    >\r\n                        {props.options[1]}\r\n                    </button>\r\n                    <button \r\n                    disabled={props.isLoading} \r\n                    onClick={()=>props.handleAnswer(props.options[2])}\r\n                    style={props.buttonStyle[2]}\r\n                    >\r\n                        {props.options[2]}\r\n                    </button>\r\n                    <button \r\n                    disabled={props.isLoading} \r\n                    onClick={()=>props.handleAnswer(props.options[3])}\r\n                    style={props.buttonStyle[3]}\r\n                    >\r\n                        {props.options[3]}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className={'message '+ props.msgClass}>{props.msg}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainBody","import React from 'react'\r\n\r\nconst GameOver=(props)=>{\r\n    return(\r\n    <div class='last-screen'>\r\n        <h1 className='game-over'>Game Over</h1>\r\n        <p className='final-score'>Final Score {props.score*10}/100</p>\r\n        <button onClick={()=>props.playAgain()}>Play Again !</button>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default GameOver","import React,{useState,useEffect} from 'react'\r\nimport Header from './UIComponents/Header'\r\nimport Timer from './UIComponents/Timer'\r\nimport Score from './UIComponents/Score'\r\nimport MainBody from './UIComponents/MainBody'\r\nimport GameOver from './UIComponents/GameOver'\r\n\r\nconst App=()=>{\r\n    const [count,setCount]=useState(1);\r\n    const [isLoading,setIsloading]=useState(true);\r\n    const [isAnswered,setIsAnswered]=useState(false);\r\n    const [score,setScore]=useState(0);\r\n    const [timeLeft,setTimeLeft]=useState(NaN);\r\n    const [question,setQuestion]=useState('');\r\n    const [msg,setMsg]=useState('Choose an option');\r\n    const [msgClass,setMsgClass]=useState('info');\r\n    const [correct,setCorrect]=useState('');\r\n    const [incorrect1,setIncorrect1]=useState('');\r\n    const [incorrect2,setIncorrect2]=useState('');\r\n    const [incorrect3,setIncorrect3]=useState('');\r\n    const [options,setOptions]=useState([]);\r\n    const [correctIndex,setCorrectIndex]=useState();\r\n    const [buttonStyle,setButtonStyle]=useState([]);\r\n\r\n    useEffect(()=>{\r\n            fetch('https://opentdb.com/api.php?category=18&amount=1&type=multiple')\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n                const result=data.results[0];\r\n                setQuestion(decodeHTML(result.question));\r\n                setCorrect(decodeHTML(result.correct_answer));\r\n                setIncorrect1(decodeHTML(result.incorrect_answers[0]));\r\n                setIncorrect2(decodeHTML(result.incorrect_answers[1]));\r\n                setIncorrect3(decodeHTML(result.incorrect_answers[2]));\r\n                setIsloading(false);\r\n                setTimeLeft(30);\r\n                setMsgClass('info');\r\n                setMsg('Choose an option');\r\n                setIsAnswered(false);\r\n            })\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n            const timmer=setInterval(()=>setTimeLeft(prev=>prev-1),1000);\r\n             return(()=>clearInterval(timmer));\r\n    },[count]);\r\n   \r\n    useEffect(()=>{\r\n        let optionsArr=[];\r\n\r\n        const createRandArr=(itemC,item2,item3,item4)=>{\r\n            let index1=(Math.random()*(3)).toFixed();\r\n            optionsArr[index1]=itemC;\r\n            setCorrectIndex(index1);\r\n            let index2=(Math.random()*(3)).toFixed();\r\n            do{\r\n                index2=(Math.random()*(3)).toFixed();\r\n            }while(index2===index1);\r\n            optionsArr[index2]=item2;\r\n            let index3=(Math.random()*(3)).toFixed();\r\n            do{\r\n                index3=(Math.random()*(3)).toFixed();\r\n            }while(index3===index1||index2===index3);\r\n            optionsArr[index3]=item3;\r\n            let index4=(Math.random()*(3)).toFixed();\r\n            do{\r\n                index4=(Math.random()*(3)).toFixed();\r\n            }while(index4===index1||index4===index2||index4===index3);\r\n            optionsArr[index4]=item4;\r\n        }\r\n        createRandArr(correct,incorrect1,incorrect2,incorrect3);\r\n        setOptions(optionsArr);\r\n        setButtonStyle([]);\r\n        \r\n    },[correct,incorrect1,incorrect2,incorrect3]);\r\n    let decodeHTML = (html)=> {\r\n        var txt = document.createElement('textarea');\r\n        txt.innerHTML = html;\r\n        return txt.value;\r\n    };\r\n    const handleAnswer=(selectedOption)=>{\r\n        let styles=[];\r\n        setIsloading(true);\r\n        setIsAnswered(true);\r\n\r\n        if(selectedOption===correct){\r\n            setTimeLeft(NaN);\r\n            setMsgClass('success');\r\n            setMsg('Correct !');\r\n            setScore(prev=>++prev);\r\n\r\n        }else{\r\n            setTimeLeft(NaN);\r\n            setMsgClass('error');\r\n            setMsg('Incorrect !');\r\n            \r\n        }\r\n        // styles on click\r\n        styles[correctIndex]={color:'green',borderColor:'green'}\r\n        let index1=correctIndex;\r\n        while(index1===correctIndex){\r\n            index1=(Math.random()*(3)).toFixed();\r\n        }\r\n        styles[index1]={color:'red',borderColor:'red'}\r\n        let index2=correctIndex;\r\n        while(index2===correctIndex||index2===index1){\r\n            index2=(Math.random()*(3)).toFixed();\r\n        }\r\n        styles[index2]={color:'red',borderColor:'red'}\r\n\r\n        let index3=(Math.random()*(3)).toFixed();\r\n        while(index3===correctIndex||index3===index1||index3===index2){\r\n            index3=(Math.random()*(3)).toFixed();\r\n        }\r\n        styles[index3]={color:'red',borderColor:'red'}\r\n        setButtonStyle(styles);\r\n\r\n        setTimeout(()=>{\r\n            setCount(prev=>prev+1);\r\n        },3000);\r\n    }\r\n    if(timeLeft===0)\r\n    {\r\n        let styles=[];\r\n        setIsloading(true);\r\n        setIsAnswered(true);\r\n        setTimeLeft(NaN);\r\n        setMsgClass('error');\r\n        setMsg('Time Ran Out !');\r\n        // styles on timeOut\r\n        styles[correctIndex]={color:'green',borderColor:'green'}\r\n        let index1=correctIndex;\r\n        while(index1===correctIndex){\r\n            index1=(Math.random()*(3)).toFixed();\r\n        }\r\n        styles[index1]={color:'red',borderColor:'red'}\r\n        let index2=correctIndex;\r\n        while(index2===correctIndex||index2===index1){\r\n            index2=(Math.random()*(3)).toFixed();\r\n        }\r\n        styles[index2]={color:'red',borderColor:'red'}\r\n\r\n        let index3=(Math.random()*(3)).toFixed();\r\n        while(index3===correctIndex||index3===index1||index3===index2){\r\n            index3=(Math.random()*(3)).toFixed();\r\n        }\r\n        styles[index3]={color:'red',borderColor:'red'}\r\n        setButtonStyle(styles);\r\n        setTimeout(()=>{\r\n        setCount(prev=>prev+1);\r\n        },3000);\r\n    }\r\n    const playAgain=()=>{\r\n        setCount(1);\r\n        setScore(0);\r\n    }\r\n\r\n    if(count>10){\r\n        return(<GameOver score={score} playAgain={playAgain}/>)\r\n    }else{\r\n        if(isAnswered){\r\n            return(\r\n                <div style={{backgroundColor:'rgb(9, 10, 12)',height:'100vh'}}>\r\n                    <Header/>\r\n                    <Timer timeLeft={timeLeft}/>\r\n                    <Score score={score*10} count={count} isLoading={isLoading}/>\r\n                    <MainBody \r\n                    isLoading={isLoading} \r\n                    question={question} \r\n                    options={options} \r\n                    correctOption={correct} \r\n                    handleAnswer={handleAnswer} \r\n                    msg={msg}\r\n                    count={count}\r\n                    msgClass={msgClass}\r\n                    correctIndex={correctIndex}\r\n                    buttonStyle={buttonStyle}\r\n                    />\r\n                </div> \r\n            )\r\n            \r\n        }else{\r\n            return(\r\n                <div style={{backgroundColor:'rgb(9, 10, 12)',height:'100vh'}}>\r\n                    <Header/>\r\n                    <Timer timeLeft={timeLeft}/>\r\n                    <Score score={score*10} count={count} isLoading={isLoading}/>\r\n                    <MainBody \r\n                    isLoading={isLoading} \r\n                    question={question} \r\n                    options={options} \r\n                    correctOption={correct} \r\n                    handleAnswer={handleAnswer} \r\n                    msg={msg}\r\n                    count={count}\r\n                    msgClass={msgClass}\r\n                    correctIndex={correctIndex}\r\n                    buttonStyle={buttonStyle}\r\n                    />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    \r\n}\r\n    \r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles.css'\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}